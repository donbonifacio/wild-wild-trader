;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name wwtrader.models.county, :imports nil, :requires nil, :uses nil, :defs {->County {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 5, :column 12, :end-line 5, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([width height elements]))}, :name wwtrader.models.county/->County, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 18, :method-params ([width height elements]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 5, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists (quote ([width height elements]))}, height {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 13, :column 7, :end-line 13, :end-column 13, :arglists (quote ([county])), :doc "Gets the county's height"}, :name wwtrader.models.county/height, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 13, :method-params ([county]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([county])), :doc "Gets the county's height"}, map->County {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 5, :column 12, :end-line 5, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__18060]))}, :name wwtrader.models.county/map->County, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 18, :method-params ([G__18060]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__18060]))}, create {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([w h])), :doc "Creates a new County"}, :name wwtrader.models.county/create, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 13, :method-params ([w h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w h])), :doc "Creates a new County"}, width {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 12, :column 7, :end-line 12, :end-column 12, :arglists (quote ([county])), :doc "Gets the county's width"}, :name wwtrader.models.county/width, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 12, :method-params ([county]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([county])), :doc "Gets the county's width"}, County {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name wwtrader.models.county/County, :file "src/wwtrader/models/county.cljc", :end-column 18, :type true, :column 12, :internal-ctor true, :line 5, :record true, :end-line 5, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, elements {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 34, :column 7, :end-line 34, :end-column 15, :arglists (quote ([county])), :doc "Gets all the elements at this county"}, :name wwtrader.models.county/elements, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 15, :method-params ([county]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([county])), :doc "Gets all the elements at this county"}, register {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 15, :column 7, :end-line 15, :end-column 15, :arglists (quote ([county coord elem])), :doc "Registers a new element on a given coordinate"}, :name wwtrader.models.county/register, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 15, :method-params ([county coord elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([county coord elem])), :doc "Registers a new element on a given coordinate"}, purge {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 21, :column 7, :end-line 21, :end-column 12, :arglists (quote ([county coord elem])), :doc "Removes the given element from the game"}, :name wwtrader.models.county/purge, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 12, :method-params ([county coord elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([county coord elem])), :doc "Removes the given element from the game"}, at {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/donbonifacio/wwtrader/src/wwtrader/models/county.cljc", :line 27, :column 7, :end-line 27, :end-column 9, :arglists (quote ([county coord])), :doc "Gets the element, if any, at the given coordinate"}, :name wwtrader.models.county/at, :variadic false, :file "src/wwtrader/models/county.cljc", :end-column 9, :method-params ([county coord]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([county coord])), :doc "Gets the element, if any, at the given coordinate"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{height :width :elements width elements :height}, :order [:width :height :elements width height elements]}, :doc "Represents a map that should be visible with several elements"}